{"version":3,"sources":["components/card/card.jsx","components/cardList/cardList.jsx","components/searchBox/searchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","onChange","type","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAIaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,KACnE,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCLjBC,G,MAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAY,WAAjB,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAwBA,QAAWA,GAAvBA,EAAQC,WCH9CO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAO,uBACKZ,UAAY,SACZa,SAAUD,EACVE,KAAM,SACNH,YAAcA,MC+BfI,E,kDAjCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAZpC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAc,IALL,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBAMxC,WACE,MAAiCC,KAAKN,MAA/Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GACvC,OAAOA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEzD,OACA,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAee,KAAKf,eAC7D,cAAC,EAAD,CAAUJ,SAAYoB,W,GA5BVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e979b94c.chunk.js","sourcesContent":["import React from \"react\";\nimport '../card/cardStyles.css';\n\n\nexport const Card = props => {\n    return(\n        <div className= 'card_container'>\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"\" />\n            <h1>{props.monster.name}</h1>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from \"react\";\nimport { Card } from \"../card/card\";\nimport './cardList.css'\n\nexport const CardList = props =>( \n    \n    <div className = 'cardList'>\n        {props.monsters.map(monster => <Card key ={monster.id} monster = {monster} />)}\n    </div>\n);\n\n","import React from 'react';\nimport '../searchBox/searchBox.css';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return <input \n                className = 'search'\n                onChange={handleChange} \n                type ='search' \n                placeholder ={placeholder}>\n            </input>\n}\n\n\n\n","import './App.css';\nimport {Component} from 'react';\nimport {CardList} from './components/cardList/cardList';\nimport {SearchBox} from './components/searchBox/searchBox'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters : [],\n      searchField : ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res=>res.json())\n    .then(users=> this.setState({monsters:users}))\n  }\n  handleChange = (e) =>{\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){ \n    const {monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return(\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder='Search Monsters' handleChange ={this.handleChange} />\n      <CardList monsters = {filteredMonsters}/>\n    </div>\n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}